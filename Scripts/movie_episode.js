document.addEventListener('DOMContentLoaded', function() {
    // X·ª≠ l√Ω dropdown menu - c·∫£i ti·∫øn ƒë·ªÉ dropdown hi·ªÉn th·ªã cho ƒë·∫øn khi r·ªùi c·∫£ button v√† dropdown
    const dropdowns = document.querySelectorAll('.dropdown');
    
    dropdowns.forEach(dropdown => {
        const dropdownBtn = dropdown.querySelector('.dropbtn');
        const dropdownContent = dropdown.querySelector('.dropdown-content');
        
        // Thi·∫øt l·∫≠p tr·∫°ng th√°i hover cho dropdown
        dropdown.addEventListener('mouseenter', function() {
            dropdownContent.style.display = 'block';
            dropdownContent.style.opacity = '1';
        });
        
        // Ch·ªâ ·∫©n dropdown khi r·ªùi kh·ªèi c·∫£ v√πng c·ªßa dropdown
        dropdown.addEventListener('mouseleave', function() {
            dropdownContent.style.display = 'none';
            dropdownContent.style.opacity = '0';
        });
    });

    // Thi·∫øt l·∫≠p bi·∫øn cho tr√¨nh ph√°t video
    const videoPlayer = document.querySelector('.video-player');
    const playButton = document.querySelector('.play-button');
    const rewindButton = document.querySelector('.rewind-button');
    const forwardButton = document.querySelector('.forward-button');
    const progressBar = document.querySelector('.progress-bar');
    const volumeButton = document.querySelector('.volume-button');
    const volumeSlider = document.querySelector('.volume-slider');
    const volumeLevel = document.querySelector('.volume-level');
    const fullscreenButton = document.querySelector('.fullscreen-button');
    const timeDisplay = document.querySelector('.time-display');
    
    // C·ªù theo d√µi tr·∫°ng th√°i ph√°t
    let isPlaying = false;
    
    // X·ª≠ l√Ω s·ª± ki·ªán n√∫t ph√°t/t·∫°m d·ª´ng
    playButton.addEventListener('click', function() {
        if (isPlaying) {
            videoPlayer.pause();
            playButton.textContent = '‚ñ∂';
        } else {
            videoPlayer.play();
            playButton.textContent = '‚è∏';
        }
        isPlaying = !isPlaying;
    });
    
    // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n v√†o video ƒë·ªÉ ph√°t/t·∫°m d·ª´ng
    videoPlayer.addEventListener('click', function(e) {
        // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh
        e.preventDefault();
        
        if (isPlaying) {
            videoPlayer.pause();
            playButton.textContent = '‚ñ∂';
        } else {
            videoPlayer.play();
            playButton.textContent = '‚è∏';
        }
        isPlaying = !isPlaying;
    });
    
    // X·ª≠ l√Ω n√∫t tua l·∫°i
    rewindButton.addEventListener('click', function() {
        videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 10);
        updateProgressBar();
    });
    
    // X·ª≠ l√Ω n√∫t tua ƒëi
    forwardButton.addEventListener('click', function() {
        videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 10);
        updateProgressBar();
    });
    
    // X·ª≠ l√Ω n√∫t √¢m l∆∞·ª£ng
    volumeButton.addEventListener('click', function() {
        if (videoPlayer.muted) {
            videoPlayer.muted = false;
            volumeButton.textContent = 'üîä';
            volumeLevel.style.width = (videoPlayer.volume * 100) + '%';
        } else {
            videoPlayer.muted = true;
            volumeButton.textContent = 'üîá';
            volumeLevel.style.width = '0%';
        }
    });
    
    // X·ª≠ l√Ω thanh √¢m l∆∞·ª£ng
    volumeSlider.addEventListener('click', function(e) {
        const rect = volumeSlider.getBoundingClientRect();
        const pos = (e.clientX - rect.left) / rect.width;
        videoPlayer.volume = pos;
        volumeLevel.style.width = (pos * 100) + '%';
        
        if (pos === 0) {
            volumeButton.textContent = 'üîá';
            videoPlayer.muted = true;
        } else {
            volumeButton.textContent = 'üîä';
            videoPlayer.muted = false;
        }
    });
    
    // X·ª≠ l√Ω n√∫t to√†n m√†n h√¨nh
    fullscreenButton.addEventListener('click', function() {
        if (videoPlayer.requestFullscreen) {
            videoPlayer.requestFullscreen();
        } else if (videoPlayer.webkitRequestFullscreen) { /* Safari */
            videoPlayer.webkitRequestFullscreen();
        } else if (videoPlayer.msRequestFullscreen) { /* IE11 */
            videoPlayer.msRequestFullscreen();
        }
    });
    
    // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
    function updateProgressBar() {
        if (videoPlayer.duration) {
            const percentage = (videoPlayer.currentTime / videoPlayer.duration) * 100;
            progressBar.style.width = percentage + '%';
            
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian
            const currentTime = formatTime(videoPlayer.currentTime);
            const duration = formatTime(videoPlayer.duration);
            timeDisplay.textContent = currentTime + ' / ' + duration;
        }
    }
    
    // X·ª≠ l√Ω thanh ti·∫øn tr√¨nh khi ng∆∞·ªùi d√πng nh·∫•p v√†o
    document.querySelector('.player-progress').addEventListener('click', function(e) {
        const rect = this.getBoundingClientRect();
        const pos = (e.clientX - rect.left) / rect.width;
        videoPlayer.currentTime = pos * videoPlayer.duration;
        updateProgressBar();
    });
    
    // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh khi video ƒëang ph√°t
    videoPlayer.addEventListener('timeupdate', updateProgressBar);
    
    // ƒê·ªãnh d·∫°ng th·ªùi gian t·ª´ gi√¢y sang HH:MM:SS
    function formatTime(seconds) {
        const h = Math.floor(seconds / 3600);
        const m = Math.floor((seconds % 3600) / 60);
        const s = Math.floor(seconds % 60);
        
        return [
            h,
            m > 9 ? m : '0' + m,
            s > 9 ? s : '0' + s
        ].filter(Boolean).join(':');
    }
    
    // X·ª≠ l√Ω danh s√°ch t·∫≠p phim
    const episodeCards = document.querySelectorAll('.episode-card');
    episodeCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.cursor = 'pointer';
        });
        
        card.addEventListener('click', function(e) {
            // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa th·∫ª a
            if (e.target.tagName.toLowerCase() !== 'a') {
                e.preventDefault();
                window.location.href = this.querySelector('a').getAttribute('href');
            }
        });
    });
    
    // X·ª≠ l√Ω n√∫t b√¨nh lu·∫≠n
    const commentSubmitButton = document.querySelector('.comment-submit button');
    const commentInput = document.querySelector('.comment-input');
    
    commentSubmitButton.addEventListener('click', function() {
        const commentText = commentInput.value.trim();
        if (commentText) {
            // T·∫°o ph·∫ßn t·ª≠ b√¨nh lu·∫≠n m·ªõi
            const newComment = document.createElement('div');
            newComment.className = 'comment-item';
            
            const currentTime = new Date();
            const timeStr = 'V·ª´a xong';
            
            newComment.innerHTML = `
                <div class="user-avatar"></div>
                <div class="comment-content">
                    <div class="comment-header">
                        <div class="user-name">B·∫°n</div>
                        <div class="comment-time">${timeStr}</div>
                    </div>
                    <div class="comment-text">
                        ${commentText}
                    </div>
                    <div class="comment-actions">
                        <div class="comment-action">Th√≠ch (0)</div>
                        <div class="comment-action">Tr·∫£ l·ªùi</div>
                        <div class="comment-action">B√°o c√°o</div>
                    </div>
                </div>
            `;
            
            // Th√™m b√¨nh lu·∫≠n m·ªõi v√†o danh s√°ch
            document.querySelector('.comments-list').prepend(newComment);
            
            // L√†m m·ªõi √¥ nh·∫≠p li·ªáu
            commentInput.value = '';
            
            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n
            const commentsTitle = document.querySelector('.comments-title');
            const currentCount = parseInt(commentsTitle.textContent.match(/\d+/)[0], 10);
            commentsTitle.textContent = commentsTitle.textContent.replace(/\d+/, currentCount + 1);
        }
    });
    
    // X·ª≠ l√Ω n√∫t "Th√≠ch" cho c√°c b√¨nh lu·∫≠n
    document.querySelectorAll('.comment-action').forEach(action => {
        if (action.textContent.includes('Th√≠ch')) {
            action.addEventListener('click', function() {
                const likeCount = parseInt(this.textContent.match(/\d+/)[0], 10);
                this.textContent = `Th√≠ch (${likeCount + 1})`;
                this.style.color = '#3498db';
            });
        }
    });
    
    // X·ª≠ l√Ω n√∫t "Xem th√™m b√¨nh lu·∫≠n"
    const loadMoreButton = document.querySelector('.load-more button');
    loadMoreButton.addEventListener('click', function() {
        // M√¥ ph·ªèng t·∫£i th√™m b√¨nh lu·∫≠n
        const commentsList = document.querySelector('.comments-list');
        
        for (let i = 0; i < 3; i++) {
            const newComment = document.createElement('div');
            newComment.className = 'comment-item';
            
            const names = ['MarvelHero', 'TonyStarkFan', 'ThorLover'];
            const comments = [
                'Ph·∫ßn n√†y hay h∆°n Infinity War r·∫•t nhi·ªÅu!',
                'C·∫£nh chi·∫øn ƒë·∫•u cu·ªëi c√πng th·∫≠t ƒë√°ng kinh ng·∫°c. Gi√° nh∆∞ h·ªç c√≥ th√™m th·ªùi gian ƒë·ªÉ ph√°t tri·ªÉn nh√¢n v·∫≠t Black Widow.',
                'Thor b√©o l√† Thor hay nh·∫•t! Th·∫≠t vui khi th·∫•y anh ·∫•y v∆∞·ª£t qua ƒë∆∞·ª£c tr·∫ßm c·∫£m.'
            ];
            
            newComment.innerHTML = `
                <div class="user-avatar"></div>
                <div class="comment-content">
                    <div class="comment-header">
                        <div class="user-name">${names[i]}</div>
                        <div class="comment-time">${i + 3} gi·ªù tr∆∞·ªõc</div>
                    </div>
                    <div class="comment-text">
                        ${comments[i]}
                    </div>
                    <div class="comment-actions">
                        <div class="comment-action">Th√≠ch (${Math.floor(Math.random() * 10)})</div>
                        <div class="comment-action">Tr·∫£ l·ªùi</div>
                        <div class="comment-action">B√°o c√°o</div>
                    </div>
                </div>
            `;
            
            commentsList.appendChild(newComment);
        }
        
        // M√¥ ph·ªèng vi·ªác ·∫©n n√∫t khi ƒë√£ t·∫£i h·∫øt b√¨nh lu·∫≠n
        loadMoreButton.textContent = 'ƒê√£ t·∫£i t·∫•t c·∫£ b√¨nh lu·∫≠n';
        loadMoreButton.disabled = true;
    });
    
    // X·ª≠ l√Ω n√∫t th√™m v√†o danh s√°ch v√† chia s·∫ª
    const actionButtons = document.querySelectorAll('.episode-actions button');
    
    actionButtons.forEach(button => {
        button.addEventListener('click', function() {
            if (this.textContent.includes('Th√™m v√†o danh s√°ch')) {
                alert('ƒê√£ th√™m v√†o danh s√°ch xem c·ªßa b·∫°n!');
                this.innerHTML = '<i class="icon icon-check"></i> ƒê√£ th√™m v√†o danh s√°ch';
                this.classList.remove('btn-outline');
                this.classList.add('btn-success');
            } else if (this.textContent.includes('Chia s·∫ª')) {
                // M√¥ ph·ªèng ch·ª©c nƒÉng chia s·∫ª
                const shareOptions = ['Facebook', 'Twitter', 'WhatsApp', 'Email', 'Sao ch√©p li√™n k·∫øt'];
                const shareOption = prompt('Ch·ªçn c√°ch chia s·∫ª:\n1. Facebook\n2. Twitter\n3. WhatsApp\n4. Email\n5. Sao ch√©p li√™n k·∫øt', '5');
                
                if (shareOption) {
                    const option = parseInt(shareOption, 10);
                    if (option >= 1 && option <= 5) {
                        alert(`ƒê√£ chia s·∫ª qua ${shareOptions[option - 1]}!`);
                    }
                }
            }
        });
    });
}); 